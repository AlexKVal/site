
view Speed {
  <Contain>
    <Title>The 10 ways Flint makes you faster</Title>

    <section>
      <SubTitle>Shorter syntax</SubTitle>
      <p></p>
    </section>

    <section>
      <SubTitle>Global views and constants</SubTitle>
      <p>
        Views and constants don't change. Once defined, they
        stay the same for their life. Because of this, allowing
        them to be global has huge upside. This isn't just a small win,
        it's fundamentally speeding your entire stack up.
      </p>
      <p>
        First, you get huge speed increases at the compiler level.
        An average React app has a masssive dependecy tree that gets
        bigger as you build. This means every time you save, that tree
        has to be tracked and compiled.
      </p>
      <p>
        Second, you write way less code. Imports and exports are nice,
        but when you're using views across hundreds of files, and you
        don't have an IDE automating anything, you're adding huge amounts
        of inflexibility.
      </p>

      <Before points={[
        'Manually import/export every view',
        'Manually import/export CONSTANTS',
        'Much slower hot reloads'
      ]} />

      <After points={[
        'Create and remove views with ease',
        'Share global style variables, fonts, and more',
        'Much faster feedback loops'
      ]} />
    </section>

    <section>
      <SubTitle>Errors from every level</SubTitle>
      <p>
        Try and render a view that doesn't exist? We tell you inline,
        with a helpful error. Make a syntax error with ES2015? That also
        notifies you, and it doesn't lose your place.
      </p>
      <p>
        Use a duplicate key for a style? Not only do we tell you, but
        we don't crash your entire app.
      </p>
      <p>
        Use a variable that hasn't been defined? We've integrated
        Flow, so you even get type checking and undefined variable
        checks for free. This is big!
      </p>

      <Before points={[
        'Errors in CLI, Browser Console, browser',
        'Tons of sharp edges to get cut on'
      ]} />

      <After points={[
        'Every error, inline, instantly',
        'Never lose your app state',
        'Catches every possible mistake for you'
      ]} />
    </section>

    <section>
      <SubTitle>Views + Styles, inline and handled</SubTitle>
      <p>
        Like Radium? Good, but you'd have to integrate it, and write
        your styles in React using a verbose syntax that is different
        depending on if you include it inline, in your render function,
        or in your file.
      </p>
      <p>
        Also, because React doesn't handle styles, the ecosystem is a mess.
        Import a component and you may get a huge dependency on Radium.
        Or you have to manually import some CSS files. Now your syntax is
        totally different!
      </p>
    </section>

    <section>
      <SubTitle>Amazing build system</SubTitle>
      <p></p>
    </section>

    <section>
      <SubTitle>Share with a single command</SubTitle>
      <p></p>
    </section>

    <section>
      <SubTitle>Shorter syntax</SubTitle>
      <p></p>
    </section>

    <section>
      <SubTitle>Shorter syntax</SubTitle>
      <p></p>
    </section>

    <section>
      <SubTitle>Shorter syntax</SubTitle>
      <p></p>
    </section>
  </Contain>
}